#include<iostream>
using namespace std;

int main()
{
	int a[3][4] = { {1,2,3,4},{5,6,7,8},{9,10,11,12} };
	
	//内存随机分配  故下面的地址也会随时变  记住变化规律即两者的差不变即可

	cout << a << endl;//0000002D121DFC58)
	cout << a[0] << "\t" << *(a + 0) << "\t" << *a << endl;//0000002D121DFC58  0000002D121DFC58  0000002D121DFC58
	cout << (a + 1) <<"\t"<< & a[1] << endl;//0000002D121DFC68  0000002D121DFC68  十六进制相差10也就是十进制里的16个字节
	cout <<(int) a[1] <<"\t"<<(int) (* (a + 1)) << endl;//1396569800  1396569800
	cout << (int)(a[1] + 2) <<"\t"<<(int) (* (a + 1) + 2) <<"\t"<<(int) ( & a[1][2]) << endl;//1396569808  1396569808  1396569808
	cout << *(a[1] + 2) <<"\t"<< *(*(a + 1) + 2) <<"\t"<< a[1][2] << endl;//7  7  7

	//summary
	//从一维数组我们得到一个重要性质  a[i]==*(a+i) 在一维数组里是元素相同  在二维数组里是地址相同！
	//地址 a[i]+j==*(a+i)+j==&a[i][j]
	//值   *(a[i]+j)==*(*(a+i)+j)==a[i][j]

	//性质
	//二维数组名是指向行的  a+1中的1代表一行中全部元素所占字节数  一维数组名指向列的 a[0]+1中的1代表一个a元素所占字节数
	//行指针前面加*转换为列指针   
	//列指针前面加&转换为行指针   a[0]指向0行0列的列指针  由于a[0]与*(a+0)等价  &a[0]与&*(a+0)也就是a等价  指向二维数组0行 也就是行指针

	//注意
	//不要把&a[i]简单的理解为a[i]元素的存储单元的地址，因为二维中并不存在a[i]这样一个实际的数据存储单元。 它只是一种地址的计算方法，能得到第 i 行的起始地址。

	system("pause");
	return 0;
}
